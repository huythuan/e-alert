<?php
/**
 * Implements hook_permission().
 */
function ealert_permission() {
  return array(
    'view ealert block' => array(
      'title' => t('View e-alert block'),
    ),
    'administer processing ealert' => array(
      'title' => t('Processing ealert file'),
    ),
    'administer ealert' => array(
      'description' => t('Access E-Alert Settings'),
      'title' => t('E-Alert Setting'),
      'restrict access' => TRUE,
    ),
  );
}
/**
 * Implements hook_menu().
 */
function ealert_menu() {
  $items  = array(); 
  $items['admin/config/content/e-alert'] = array(
    'title' => 'E-Alert config  block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ealert_page_form'),
    'access arguments' => array('administer ealert'),
    'file' => 'ealert.admin.inc',
    'description' => 'Setting for ealert file.',
  );
  $items['e-alert/process/%'] = array(
    'title' => 'E-Alert config  block',
    'page callback' => 'ealert_download_file',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'access callback'  => 'ealert_check',
    'type' => MENU_CALLBACK,
    'description' => 'processing for ealert file.',
  );
  return $items;
}
/**
 * access control
 */
function ealert_check() {
  global $user;
  if ($user->uid){ // user logged in
    return TRUE;
  }
  return FALSE; // anonymous
}
/**
 * Implement hook_node_delete
 * @param type $node
 */
function ealert_node_delete($node) {
  if ($node->type == 'e_alert') {
    $file_path = ealert_get_ealert_file_path($node);
    if (file_exists($file_path)) {
      unlink($file_path);
    }
  }
}
/**
 * Implement hook_node_insert
 * @param type $node
 */
function ealert_node_insert($node) {
  if ($node->type == 'e_alert') {
    if(!ealert_process_page_for_ealert($node)) {
      watchdog('e-alert', 
        'Cannot create e-alert file nid: %nid ' .
        array('%nid' => $node->nid), 
        WATCHDOG_ERROR);
    }
  }
}

/**
 * Implement hook_node_update
 * @param type $node
 */
function ealert_node_update($node) {
  if ($node->type == 'e_alert') {
    if(!isset($node->field_file_e_alert['und'][0]['fid'])) {
      if(!ealert_process_page_for_ealert($node)) {
        watchdog('e-alert', 
         'Cannot create e-alert file nid: %nid ' .
          array('%nid' => $node->nid), 
          WATCHDOG_ERROR);
      }
    }
    else {
      //Sync the content of the e-alert file with the upload file
      // so that the content of upload file and the content of 
      // e-alert file should be the same.
      $file = file_load($node->field_file_e_alert['und'][0]['fid']);
      $file_upload_path = drupal_realpath($file->uri);
      $file_upload_content = file_get_contents($file_upload_path);
      
      // get the path of the e-aler file (E-Alert file name is a unique file name of a e-alert node)
      $file_path = ealert_get_ealert_file_path($node);
      
      // Update the content of the e-alert file 
      if (isset($file_path)) {
        $fp = fopen($file_path, "wb");
        fwrite($fp, $file_upload_content);
        fclose($fp);
      }
    }
  }
}
/**
 * download e-alert file
 */
function ealert_download_file($nid) {
  $node  =  node_load($nid);
  $file_path = ealert_get_ealert_file_path($node);
  if (file_exists($file_path)) {
    // Serve file download.
    drupal_add_http_header('Pragma', 'public');
    drupal_add_http_header('Expires', '0');
    drupal_add_http_header('Cache-Control', 'must-revalidate, post-check=0, pre-check=0');
    drupal_add_http_header('Content-Type', 'application/vnd.ms-excel');
    drupal_add_http_header('Content-Disposition', 'attachment; filename=' . basename($file_path) . ';');
    drupal_add_http_header('Content-Transfer-Encoding', 'binary');
    drupal_add_http_header('Content-Length', filesize($file_path));
    readfile($file_path);
    drupal_exit();
  }
}
/**
 * Create file at folder e_alert
 * return @string file_path
 * @param type $nid
 */
function ealert_process_page_for_ealert($node) {
  if ($node->type == 'e_alert') {
    $file_path = ealert_get_ealert_file_path($node);
    // Process header file
    $title = $node->title;
    $header = ealert_add_google_code('header', variable_get('ealert_header'), $node);
    $header = ealert_page_title($header, $title);
    
    //Process footer file
    $footer = ealert_add_google_code('footer', variable_get('ealert_footer'), $node);
    
    //Process body
    $body = '<font size="4"><p align="center"><br>' . $node->title .'</p></font>' . PHP_EOL; // Add title
    $body .= $node->body['und'][0]['value'];
    $body = ealert_add_google_code('body', $body, $node);
    //sanitize for content
    $body = ealert_sanitize_content($body);
    
    //Process content
    $content = $header . $body . $footer;
    $fp = fopen($file_path, "wb");
    fwrite($fp, $content);
    fclose($fp);
    return $file_path;
  }
  return FALSE;
}

/**
 * Implement hook_block_info
 * @return type
 */
function ealert_block_info() {
  // This example comes from node.module.
  $blocks['ealert'] = array(
    'info' => t('Ealert file info'), 
  );
  return $blocks;
}

function ealert_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'ealert':
      $block['subject'] = t('E-Alert');
      $block['content'] = _ealert_page_content();
      break;
  }
  return $block;
}
/**
 * return content for ealert block
 * @return type
 */
function _ealert_page_content() {
  if (arg(0) == 'node') {
    $nid = arg(1);
    $node  =  node_load($nid);
    if ($node->type == 'e_alert') {
      $file_url = ealert_get_ealert_file_url($node);
      $view_file = '<p>' . '<a href="' . $file_url . '" target="_blank">' . 'View E-Alert File' . '</a></p>';
      $content = $view_file;
      $content .= '<p>Google code:</p>';
      $content .= '<p>' . ealert_google_code($node) . '</p>';
      $download = '<p><a href="/e-alert/process/' . $nid . '">Download E-Alert File</a></p>';
      return array (
        '#markup' => t($content . $download),
      );
    }
  }
}
/**
 * Replace title for ealert
 * @param type $content
 * @param type $title_replace
 * @return string content
 */
function ealert_page_title($content, $title_replace) {
	$res = preg_match("/<title>(.*)<\/title>/siU", $content, $title_matches);
    // Clean up title: remove EOL's and excessive whitespace.
	$title_replace = preg_replace('/\s+/', ' ', $title_replace);
  $title_replace = trim($title_replace);
	$title_replace = '<title>'.$title_replace.'</title>';
	if(isset($title_matches[1])){
	$content = str_replace('<title>'.$title_matches[1].'</title>',$title_replace,$content);
	}
	
  return $content;
}


/**
 * turn a string to machine reader 
 * @param type $string
 * @return type
 */
function ealert_xml_to_content_seo_url($string) {
    //Lower case everything
    $string = trim(strtolower($string));
    //Make alphanumeric (removes all other characters)
    $string = preg_replace("/[^a-z0-9_\s-]/", "", $string);
    //Clean up multiple dashes or whitespaces
    $string = preg_replace("/[\s-]+/", " ", $string);
    //Convert whitespaces and underscore to dash
    $string = preg_replace("/[\s_]/", "-", $string);
    return $string;
}
/**
 * return string google code for ealert block
 * @param type $node
 */
function ealert_google_code($node) {
  $title = $node->title;
  $type = $node->field_e_alert_type['und'][0]['value'];
  $campaign = 'utm_campaign=' . ealert_xml_to_content_seo_url(variable_get('ealert_member')) .
               '-' . ealert_xml_to_content_seo_url($title);
  $source = 'utm_source=' . $type;
  $google_code ='';
  $google_code = '?' . $campaign;
  $google_code .='&amp;utm_medium=email';
  $google_code .='&amp;' . $source;
  $google_code .='&amp;' . '&utm_content=link';
  
  return $google_code;
}

/**
 * Replace google code on content
 * @param type string $content
 * @param type object $node
 * @return string content with google code add to link
 */
function ealert_add_google_code($part, $content, $node) { 
  $title = $node->field_subject_line['und'][0]['value'];
  $type = $node->field_e_alert_type['und'][0]['value'];
  $e_news = $node->field_e_news['und'][0]['value'];
  $campaign = 'utm_campaign=' . ealert_xml_to_content_seo_url(variable_get('ealert_member')) .
               '-' . ealert_xml_to_content_seo_url($title);
  $source = 'utm_source=' . $type;
  switch ($part) {
    case 'header':
      $source = 'utm_source=' . $type;
      $google_code ='';
      $google_code = '?' . $campaign;
      $google_code .='&amp;utm_medium=email';
      $google_code .='&amp;' . $source;
      $google_code_link = $google_code . '&amp;' . '&utm_content=websiteheader';
      break;
    case 'body':
      $source = 'utm_source=' . $type;
      $google_code ='';
      $google_code = '?' . $campaign;
      $google_code .='&amp;utm_medium=email';
      $google_code .='&amp;' . $source;
      $google_code_link = $google_code . '&amp;' . '&utm_content=link';
      $google_code_image = $google_code . '&amp;' . '&utm_content=image';
      break;
    case 'footer':
      $source = 'utm_source=' . $type;
      $google_code ='';
      $google_code = '?' . $campaign;
      $google_code .='&amp;utm_medium=email';
      $google_code .='&amp;' . $source;
      $google_code_link = $google_code . '&amp;' . '&utm_content=websitefooter';
      break;
  }
  
  //get all links from ealert
  $links = ealert_get_urls($content);
  if(isset($links)) {
    foreach($links as $link) {
      $array_url = explode('?utm_campaign=', $link);
      //remove all old google code
      $content = str_replace('href="' . $link . '"', 'href="' . $array_url[0] . '"', $content);
      // add new google code
      if ($part == 'header' || $part == 'footer') {
        $content = str_replace('href="' . $array_url[0] . '"', 'href="' . $array_url[0] . $google_code_link . '"', $content);
      }
    }
  } 
  // Special process for body part
  if ($part == 'body') {
    //get all links from ealert
    $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
    $i = 0;
    if(preg_match_all("/$regexp/siU", $content, $matches)) { 
      foreach($matches[0] as $link) {
        $href = ealert_get_urls($link);
        if (isset($e_news) && $e_news == '1') {
          if (strpos($link, '<img') !== false) {
            $link_with_google_code = str_replace('href="' . $href[0] . '"', 'href="' . $href[0] . $google_code_image . '#' . $i .'"', $link);
            $content = str_replace($link, $link_with_google_code, $content);
          }
          else {
            $link_with_google_code = str_replace('href="' . $href[0] . '"', 'href="' . $href[0] . $google_code_link . '#' . $i . '"', $link);
            $content = str_replace($link, $link_with_google_code, $content);
          }
          $i++;
        }
        else {
          if (strpos($link, '<img') !== false) {
            $link_with_google_code = str_replace('href="' . $href[0] . '"', 'href="' . $href[0] . $google_code_image . '"', $link);
            $content = str_replace($link, $link_with_google_code, $content);
          }
          else {
            $link_with_google_code = str_replace('href="' . $href[0] . '"', 'href="' . $href[0] . $google_code_link . '"', $link);
            $content = str_replace($link, $link_with_google_code, $content);
          }
        }
      }
    }
  }
  return $content;
}

/**
*
* @get URLs from string (string maybe a url)
*
* @param string $string

* @return array
*
*/
function ealert_get_urls($string) {
  libxml_use_internal_errors(true);
  $hrefs = array();
  $dom = new DOMDocument();
  $dom->loadHTML($string);
  $tags = $dom->getElementsByTagName('a');
  foreach ($tags as $tag) {
    $hrefs[] =  $tag->getAttribute('href');
	   }
  return $hrefs;
}
/**
 * sanitize content, remove special chars
 * @param type string $content
 */
function ealert_sanitize_content($content) {
  mb_internal_encoding("UTF-8");
  mb_regex_encoding("UTF-8");
  //Replace characters
  $content = mb_ereg_replace('“','"', $content);
  $content = mb_ereg_replace('”','"', $content);
  $content = mb_ereg_replace('’',"'", $content);
  $content = htmlentities($content);
  $content = str_replace('&mdash;','-', $content);
  $content = str_replace('&amp;ldquo;','"', $content);
  $content = str_replace('&amp;rdquo;','"', $content);
  $content = str_replace('&nbsp;','', $content);
  $content = str_replace('&amp;lsquo;',"'", $content);
  $content = str_replace('&amp;rsquo;',"'", $content);
  $content = str_replace('&ndash;',"-", $content);
  $content = html_entity_decode($content);
  return $content;
}
/**
 * Get e-alert file path
 * @param type $nid
 * return string $path
 */
function ealert_get_ealert_file_path($node) {
  if ($node->type == 'e_alert') {
    $district = variable_get('ealert_district');
    $file_name = date('Ymd',strtotime($node->field_send_date['und'][0]['value'])) . 'AD' . trim($district) . 'EAlert' . '_' . $node->nid . '.htm';
    $dir_name = drupal_realpath('public://') . '/e_alert';
    if(!is_dir($dir_name)) {
      mkdir($dir_name, 0755);
    }
    $file_path = $dir_name . '/' . $file_name;
    return $file_path;
  }
}
/**
 * Get e-alert file url
 * @param type $nid
 * return string $path
 */
function ealert_get_ealert_file_url($node) {
  if ($node->type == 'e_alert') {
    $district = variable_get('ealert_district');
    $file_name = date('Ymd',strtotime($node->field_send_date['und'][0]['value'])) . 'AD' . trim($district) . 'EAlert' . '_' . $node->nid . '.htm';
    $file_url = file_create_url('public://' . '/e_alert/' . $file_name);
    return $file_url;
  }
}

